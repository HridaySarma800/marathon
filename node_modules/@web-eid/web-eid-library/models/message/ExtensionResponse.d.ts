import Action from "../Action";
import { SignatureAlgorithm } from "../SignatureAlgorithm";
export interface ExtensionWarningResponse {
    action: Action.WARNING;
    /**
     * Warning messages from the extension
     *
     * The extension will only trigger warnings when needed.
     * These warnings could be deprecation warnings of the current API
     * and are meant for the maintainers of the website which uses the Web-eID library.
     */
    warnings: Array<string>;
}
export interface ExtensionStatusResponse {
    action: Action.STATUS_SUCCESS;
    /**
     * A version number string in SemVer format
     *
     * @see https://semver.org/
     */
    library: string;
    /**
     * A version number string in SemVer format
     *
     * @see https://semver.org/
     */
    extension: string;
    /**
     * A version number string in SemVer format
     *
     * @see https://semver.org/
     */
    nativeApp: string;
}
export interface ExtensionAuthenticateResponse {
    action: Action.AUTHENTICATE_SUCCESS;
    /**
     * The base64-encoded DER-encoded authentication certificate of the eID user
     *
     * The public key contained in this certificate should be used to verify the signature.
     * The certificate cannot be trusted as it is received from client side and the client can submit a malicious certificate.
     * To establish trust, it must be verified that the certificate is signed by a trusted certificate authority.
     */
    unverifiedCertificate: string;
    /**
     * The algorithm used to produce the authentication signature
     *
     * The allowed values are the algorithms specified in JWA RFC8 sections 3.3, 3.4 and 3.5
     * @see https://www.ietf.org/rfc/rfc7518.html
     */
    algorithm: "ES256" | "ES384" | "ES512" | "PS256" | "PS384" | "PS512" | "RS256" | "RS384" | "RS512";
    /**
     * The base64-encoded signature of the token
     */
    signature: string;
    /**
     * The type identifier and version of the token format separated by a colon character
     *
     * @example "web-eid:1.0"
     */
    format: string;
    /**
     * The URL identifying the name and version of the application that issued the token
     *
     * @example "https://web-eid.eu/web-eid-app/releases/2.0.0+0"
     */
    appVersion: string;
}
export interface ExtensionGetSigningCertificateResponse {
    action: Action.GET_SIGNING_CERTIFICATE_SUCCESS;
    /**
     * The Base64-encoded DER-encoded signing certificate of the eID user
     */
    certificate: string;
    /**
     * The supported signature algorithm options
     */
    supportedSignatureAlgorithms: Array<SignatureAlgorithm>;
}
export interface ExtensionSignResponse {
    action: Action.SIGN_SUCCESS;
    /**
     * Signature algorithm
     */
    signatureAlgorithm: SignatureAlgorithm;
    /**
     * The base64-encoded signature
     */
    signature: string;
}
export interface ExtensionFailureResponse {
    action: Action.STATUS_FAILURE | Action.AUTHENTICATE_FAILURE | Action.GET_SIGNING_CERTIFICATE_FAILURE | Action.SIGN_FAILURE;
    error: any;
}
export declare type ExtensionResponse = ExtensionStatusResponse | ExtensionAuthenticateResponse | ExtensionGetSigningCertificateResponse | ExtensionSignResponse | ExtensionWarningResponse | ExtensionFailureResponse;
//# sourceMappingURL=ExtensionResponse.d.ts.map