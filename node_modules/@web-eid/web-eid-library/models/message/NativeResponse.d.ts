import { SignatureAlgorithm } from "../SignatureAlgorithm";
export interface NativeStatusResponse {
    version: string;
}
export interface NativeAuthenticateResponse {
    /**
     * The base64-encoded DER-encoded authentication certificate of the eID user
     *
     * The public key contained in this certificate should be used to verify the signature.
     * The certificate cannot be trusted as it is received from client side and the client can submit a malicious certificate.
     * To establish trust, it must be verified that the certificate is signed by a trusted certificate authority.
     */
    unverifiedCertificate: string;
    /**
     * The algorithm used to produce the authentication token signature
     *
     * The allowed values are the algorithms specified in JWA RFC8 sections 3.3, 3.4 and 3.5
     * @see https://www.ietf.org/rfc/rfc7518.html
     */
    algorithm: "ES256" | "ES384" | "ES512" | "PS256" | "PS384" | "PS512" | "RS256" | "RS384" | "RS512";
    /**
     * The Base64-encoded authentication token signature
     */
    signature: string;
    /**
     * The type identifier and version of the authentication token format
     *
     * @example "web-eid:1.0"
     */
    format: string;
    /**
     * The URL identifying the name and version of the application that issued the token
     *
     * @example "https://web-eid.eu/web-eid-app/releases/2.0.0+0"
     */
    appVersion: string;
}
export interface NativeGetSigningCertificateResponse {
    /**
     * The Base64-encoded DER-encoded signing certificate of the eID user
     */
    certificate: string;
    /**
     * The supported signature algorithm options
     */
    supportedSignatureAlgorithms: Array<SignatureAlgorithm>;
}
export interface NativeSignResponse {
    /**
     * Signature algorithm
     */
    signatureAlgorithm: SignatureAlgorithm;
    /**
     * The base64-encoded signature
     */
    signature: string;
}
export declare type NativeQuitResponse = Record<string, never>;
export interface NativeFailureResponse {
    error: {
        code: string;
        message: string;
    };
}
export declare type NativeResponse = NativeStatusResponse | NativeAuthenticateResponse | NativeGetSigningCertificateResponse | NativeSignResponse | NativeFailureResponse;
//# sourceMappingURL=NativeResponse.d.ts.map